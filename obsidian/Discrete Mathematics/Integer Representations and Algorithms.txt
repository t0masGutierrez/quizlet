algorithm

- procedure for performing arithmetic operations on representations of integers
---
base b expansion of integer n

- represent integer as sum product of increasing base exponent
---
base b expansion of integer n formula

$$
\begin{align*}
n = a_kb^k + a_{k - 1}b^{k - 1} + ... + a_1b^1 + a_0b^0 \\
k = \{0, 1, 2, ... b\} \\
a_k = \text{digit}
\end{align*}
$$
---
binary

- represent integer as number less than 2
---
binary formula

$$
\begin{align*}
n_2 = \{0, 1\}
\end{align*}
$$
---
octal

- represent integer as number less than 8
---
octal formula

$$
\begin{align*}
n_8 = \{0, 1, 3, 4, 5, 6, 7\}
\end{align*}
$$
---
decimal

- represent integer as number less than 10
---
decimal formula

$$
\begin{align*}
n_{10} = \{0, 1, 3, 4, 5, 6, 7, 8, 9\}
\end{align*}
$$
---
hexadecimal

- represent integer as number less than 10 and letter less than F
---
hexadecimal formula

$$
\begin{align*}
n_{16} = \{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F\}
\end{align*}
$$
---
base conversion

- convert base
![[Discrete Mathematics/Images/base conversion.png]]
---
base conversion formula

$$
\begin{align*}
n = bq + r \\
b = \text{base} \\
q = \text{quotient} \\
r = \text{remainder}
\end{align*}
$$
---
calculate base conversion

- integer *n* division with base *b* equal quotient
- integer *n* subtraction base *b* multiplication with quotient *q* equal remainder *r*
- repeat until quotient zero
- base conversion equal descending remainder
---
addition algorithm

- sum corresponding digits and carry
![[Discrete Mathematics/Images/addition algorithm.png|200]]
---
addition formula

$$
\begin{align*}
p_k + q_k + c_{k - 1} = bc_k + s_k \\
p = \text{addend} \\
q = \text{addend} \\
c = \text{carry} \\
b = \text{base} \\
s = \text{sum}
\end{align*}
$$
---
multiplication algorithm

- multiply corresponding digits and carry
![[Discrete Mathematics/Images/multiplication algorithm.png|150]]
---
multiplication formula

$$
\begin{align*}
\sum_{k = 0}^n p_{k_1} q_{k_2} b^{k_1 + k_2} = p_0q_0b^0 + p_1q_1b^2 + ... + p_{n - 1}q_{n - 1}b^{2n - 2} \\
k = \{0, 1, 2, ... n - 1\}
\end{align*}
$$
---
modular exponentiation

- exponentiate and operate modulus per exponent
---
modular exponentiation formula

$$
\begin{align*}
b^n \ \text{mod} \ m \\
m = \text{modulus}
\end{align*}
$$
---
calculate modular exponentiation

- base 2 expansion of integer *n* 
- result equal 1
- if exponent equal 0 then square result
- if exponent equal 1 then result multiplication with base
- operate modulus
- repeat until exponent zero
---
