import streamlit as st
from quizlet import md_to_txt
from quizlet import clean_data
from app import configure_settings

def learn():
    pass

def learn_flashcards(file_path, is_shuffle, answ_type):
    """
    Repeatedly loop through the data until mastered

    Parameters
    ----------
    file_path : str
        Location of clicked subdirectory
    is_shuffle : bool
        Randomize the data or not
    answ_type : str
        Type of answer generated by the client
    """
    data = clean_data(file_path)
    if "index" not in st.session_state:
        st.session_state["index"] = 0
    if "flip" not in st.session_state:
        st.session_state["flip"] = False
    if "next" not in st.session_state:
        st.session_state["next"] = False
    if "back" not in st.session_state:
        st.session_state["back"] = False
    
    def flip_flashcard(card):
        """
        Flip the flashcard
        """
        if card == "front":
            back()
        else:
            front()

    def increment_flashcard():
        """
        Show the next flashcard
        """
        st.session_state["index"] += 1
        front()

    def decrement_flashcard():
        """
        Show the previous flashcard
        """
        if st.session_state["index"] > 0:
            st.session_state["index"] -= 1
        front()

    def front():
        st.progress(st.session_state["index"] / len(data))
        left, middle, right = st.columns(3)
        left.button("⬅️", width="stretch", on_click=decrement_flashcard)
        middle.button("Flip", width="stretch", on_click=flip_flashcard, args=["front"])
        right.button("➡️", width="stretch", on_click=increment_flashcard)
    
        if st.session_state["index"] < len(data):
            i = st.session_state["index"]
            term = list(data)[i]
            definition = data[term]
            st.write(term)
        else:
            st.session_state["index"] = 0
            configure_settings(file_path)

    def back():
        st.progress(st.session_state["index"] / len(data))
        left, middle, right = st.columns(3)
        left.button("⬅️", width="stretch", on_click=decrement_flashcard)
        middle.button("Flip", width="stretch", on_click=flip_flashcard, args=["back"])
        right.button("➡️", width="stretch", on_click=increment_flashcard)
    
        if st.session_state["index"] < len(data):
            i = st.session_state["index"]
            term = list(data)[i]
            definition = data[term]
            st.write(definition)
        else:
            st.session_state["index"] = 0
            configure_settings(file_path)
    front()

def learn_choice(file_path, is_shuffle, answ_type):
    """
    Repeatedly loop through the data until mastered

    Parameters
    ----------
    file_path : str
        Location of clicked subdirectory
    is_shuffle : bool
        Randomize the data or not
    answ_type : str
        Type of answer generated by the client
    """
    data = clean_data(file_path)

    def hide_choice():
        pass

    correct = []
    incorrect = []

def learn_write(file_path, is_shuffle, answ_type):
    """
    Repeatedly loop through the data until mastered

    Parameters
    ----------
    file_path : str
        Location of clicked subdirectory
    is_shuffle : bool
        Randomize the data or not
    answ_type : str
        Type of answer generated by the client
    """
    data = clean_data(file_path)

    def hide_write():
        pass

    correct = []
    incorrect = []

def learn_test(file_path, is_shuffle, answ_type):
    """
    Repeatedly loop through the data until mastered

    Parameters
    ----------
    file_path : str
        Location of clicked subdirectory
    is_shuffle : bool
        Randomize the data or not
    answ_type : str
        Type of answer generated by the client
    """
    data = clean_data(file_path)

    def hide_test():
        pass

    correct = []
    incorrect = []


def main():
    learn()

if __name__ == "__main__":
    main()
